---
title: "ðŸŽ¬ SakilaQuery"
title-block-banner: true
author: "Amal REKIK"
categories: ["SQL", "Python"]
description: "Analyse de la base de donnÃ©es cinÃ©matographique Sakila Ã  travers des requÃªtes SQL avancÃ©es et une exploration visuelle."
date: 2025-04-20
date-format: DD/MM/YYYY
image: imgs/sakila_Query.png
highlight-style: pygments
filters:
    - include-code-files
header-includes:
  - <link rel="stylesheet" href="sakila.css">

---

```{python}
from itables import init_notebook_mode
from pathlib import Path
import polars as pl
import sqlite3

init_notebook_mode(all_interactive=True)
conn = sqlite3.connect("sakila.db")

```

```{python}
# | code-fold: true
# | code-summary: "Fonction pour exÃ©cuter une requÃªte SQL"
def table_query_results(query_file: str, conn: sqlite3.Connection):
    """
    ExÃ©cute une requÃªte SQL Ã  partir dâ€™un fichier et retourne les rÃ©sultats sous forme de tableau Polars.

    Args:
        query_file (str): Chemin vers le fichier contenant la requÃªte SQL.
        conn (sqlite3.Connection): Connexion active Ã  la base de donnÃ©es SQLite.

    Returns:
        pl.DataFrame: RÃ©sultats de la requÃªte sous forme de tableau.
    """
    query_path = Path(query_file)
    with query_path.open("r", encoding="utf-8") as file:
        query = file.read()

    results = conn.execute(query)
    if results.description is None:
        return pl.DataFrame()  

    column_names = [col[0] for col in results.description]
    dataframe = pl.DataFrame(results.fetchall(), schema=column_names, strict=False, orient="row")

    return dataframe

```

## ERD

```{mermaid}
erDiagram

    ACTOR {
        INT actor_id PK
        VARCHAR first_name
        VARCHAR last_name
        TIMESTAMP last_update
    }

    ADDRESS {
        INT address_id PK
        VARCHAR address
        VARCHAR address2
        VARCHAR district
        INT city_id
        VARCHAR postal_code
        VARCHAR phone
        TIMESTAMP last_update
    }

    CATEGORY {
        INT category_id PK
        VARCHAR name
        TIMESTAMP last_update
    }

    CITY {
        INT city_id PK
        VARCHAR city
        INT country_id
        TIMESTAMP last_update
    }

    COUNTRY {
        INT country_id PK
        VARCHAR country
        TIMESTAMP last_update
    }

    CUSTOMER {
        INT customer_id PK
        INT store_id
        VARCHAR first_name
        VARCHAR last_name
        VARCHAR email
        INT address_id
        BOOLEAN active
        DATETIME create_date
        TIMESTAMP last_update
    }

    FILM {
        INT film_id PK
        VARCHAR title
        VARCHAR description
        INT release_year
        INT language_id
        INT original_language_id
        INT rental_duration
        DECIMAL rental_rate
        INT length
        DECIMAL replacement_cost
        VARCHAR rating
        VARCHAR special_features
        TIMESTAMP last_update
    }

    FILM_ACTOR {
        INT actor_id PK
        INT film_id PK
        TIMESTAMP last_update
    }

    FILM_CATEGORY {
        INT film_id PK
        INT category_id PK
        TIMESTAMP last_update
    }

    INVENTORY {
        INT inventory_id PK
        INT film_id
        INT store_id
        TIMESTAMP last_update
    }

    LANGUAGE {
        INT language_id PK
        CHAR name
        TIMESTAMP last_update
    }

    PAYMENT {
        INT payment_id PK
        INT customer_id
        INT staff_id
        INT rental_id
        DECIMAL amount
        DATETIME payment_date
        TIMESTAMP last_update
    }

    RENTAL {
        INT rental_id PK
        DATETIME rental_date
        INT inventory_id
        INT customer_id
        DATETIME return_date
        INT staff_id
        TIMESTAMP last_update
    }

    STAFF {
        INT staff_id PK
        VARCHAR first_name
        VARCHAR last_name
        INT address_id
        BLOB picture
        VARCHAR email
        INT store_id
        BOOLEAN active
        VARCHAR username
        VARCHAR password
        TIMESTAMP last_update
    }

    STORE {
        INT store_id PK
        INT manager_staff_id
        INT address_id
        TIMESTAMP last_update
    }

    FILM ||--o{ FILM_ACTOR : has_actor
    ACTOR ||--o{ FILM_ACTOR : plays_in
    FILM ||--o{ FILM_CATEGORY : has_category
    CATEGORY ||--o{ FILM_CATEGORY : includes_film
    FILM }o--|| LANGUAGE : language
    FILM }o--|| LANGUAGE : original_language
    FILM ||--o{ INVENTORY : available_as
    INVENTORY ||--o{ RENTAL : rented_as
    RENTAL ||--|{ PAYMENT : paid_by
    CUSTOMER ||--o{ RENTAL : makes
    CUSTOMER ||--o{ PAYMENT : executes
    INVENTORY }o--|| STORE : belongs_to
    STORE ||--o{ STAFF : employs
    STAFF ||--o{ RENTAL : manages
    STAFF ||--o{ PAYMENT : processes
    CUSTOMER }o--|| STORE : registered_at
    CUSTOMER }o--|| ADDRESS : lives_at
    STAFF }o--|| ADDRESS : resides_at
    STORE }o--|| ADDRESS : located_at
    ADDRESS }o--|| CITY : in
    CITY }o--|| COUNTRY : in


```

## RequÃªte 1 

```{.sql include="queries/top_10_films.sql"}
```

```{python}
table_query_results("queries/top_10_films.sql", conn=conn)

```

## RequÃªte 2 

```{.sql include="queries/top_clients.sql"}
```

```{python}
table_query_results("queries/top_clients.sql", conn=conn)

```

## RequÃªte 3

```{.sql include="queries/films_by_category.sql"}
```

```{python}
table_query_results("queries/films_by_category.sql", conn=conn)

```

## RequÃªte 4 

```{.sql include="queries/payments_by_month.sql"}
```

```{python}
table_query_results("queries/payments_by_month.sql", conn=conn)

```

## RequÃªte 5 

```{.sql include="queries/staff_performance.sql"}
```

```{python}
table_query_results("queries/staff_performance.sql", conn=conn)

```

## RequÃªte 6

```{.sql include="queries/avg_rental_duration.sql"}
```

```{python}
table_query_results("queries/avg_rental_duration.sql", conn=conn)

```

## RequÃªte 7

```{.sql include="queries/film_popularity_rank.sql"}
```

```{python}
table_query_results("queries/film_popularity_rank.sql", conn=conn)

```

## RequÃªte 8

```{.sql include="queries/avg_rental_by_category.sql"}
```

```{python}
table_query_results("queries/avg_rental_by_category.sql", conn=conn)

```

## RequÃªte 9

```{.sql include="queries/customer_retention.sql"}
```

```{python}
table_query_results("queries/customer_retention.sql", conn=conn)

```

## RequÃªte 10

```{.sql include="queries/top_employee_by_month.sql"}
```

```{python}
table_query_results("queries/top_employee_by_month.sql", conn=conn)

```

## RequÃªte 11 

```{.sql include="queries/revenue_per_minute.sql"}
```

```{python}
table_query_results("queries/revenue_per_minute.sql", conn=conn)

```

## RequÃªte 12

```{.sql include="queries/films_longer_than_avg.sql"}
```

```{python}
table_query_results("queries/films_longer_than_avg.sql", conn=conn)

```

## RequÃªte 13

```{.sql include="queries/rank_by_category.sql"}
```

```{python}
table_query_results("queries/rank_by_category.sql", conn=conn)

```


## RequÃªte 14

```{.sql include="queries/inactive_customers.sql"}
```

```{python}
table_query_results("queries/inactive_customers.sql", conn=conn)

```

## RequÃªte 15

```{.sql include="queries/rental_payment_status.sql"}
```

```{python}
table_query_results("queries/rental_payment_status.sql", conn=conn)

```

## CrÃ©ation de la vue avec customer_total_spent_view.sql

```{.sql include="queries/customer_total_spent_view.sql"}
```

```{python}
conn.execute(Path("queries/customer_total_spent_view.sql").read_text(encoding="utf-8"));
```


## RequÃªte 16

```{.sql include="queries/customer_total_spent_query.sql"}
```

```{python}
table_query_results("queries/customer_total_spent_query.sql", conn=conn)

```